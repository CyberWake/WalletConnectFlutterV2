# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  # lane :tests do |options|
  #   xcargs = ""
  #   xcargs << "RELAY_HOST='#{options[:relay_host]}' " if options[:relay_host]
  #   xcargs << "PROJECT_ID='#{options[:project_id]}' " if options[:project_id]

  #   xctestrun = ""
  #   Dir.chdir("..") do
  #     xctestrun = Dir.glob("**/*#{options[:testplan]}*.xctestrun").first

  #     puts "Using following xctestrun file:"
  #     puts xctestrun
  #   end
  
  #   run_tests(
  #     project: 'Runner.xcodeproj',
  #     scheme: options[:scheme],
  #     testplan: defined?(xctestrun) ? nil : options[:testplan],
  #     cloned_source_packages_path: 'SourcePackagesCache',
  #     destination: 'platform=iOS Simulator,name=iPhone 14',
  #     derived_data_path: 'DerivedDataCache',
  #     skip_package_dependencies_resolution: true,
  #     skip_build: true,
  #     xcargs: xcargs,
  #     xcodebuild_formatter: "xcbeautify --preserve-unbeautified",
  #     output_directory: "test_results",
  #     result_bundle: true,
  #     buildlog_path: "test_results",
  #     output_types: "junit",
  #     xctestrun: xctestrun,
  #     test_without_building: true,
  #   )
  # end

  # lane :build do |options|
  #   xcodebuild(
  #     project: 'Runner.xcodeproj',
  #     scheme: options[:scheme],
  #     destination: 'platform=iOS Simulator,name=iPhone 14',
  #     xcargs: "-clonedSourcePackagesDirPath SourcePackagesCache -derivedDataPath DerivedDataCache"
  #   )
  # end

  # lane :resolve do |options|
  #   xcodebuild(
  #     project: 'Runner.xcodeproj',
  #     scheme: options[:scheme],
  #     destination: 'platform=iOS Simulator,name=iPhone 13',
  #     xcargs: "-resolvePackageDependencies -clonedSourcePackagesDirPath SourcePackagesCache -derivedDataPath DerivedDataCache"
  #   )
  # end

  lane :release_testflight do |options|
    setup_ci
    api_key = app_store_connect_api_key(
      key_id: options[:app_store_key_id],
      issuer_id: options[:apple_issuer_id],
      key_content: options[:app_store_connect_key],
      duration: 1200,            
      in_house: false,
    )
    puts "api_key: #{api_key}"
    match(
      readonly: false,
      type: "appstore",
      app_identifier: "com.walletconnect.flutterdapp",
      git_url: options[:match_git_url],
      git_basic_authorization: options[:token],
      api_key: api_key,
      include_all_certificates: true,
      force_for_new_devices: true,
      force_for_new_certificates: true,
      keychain_password: options[:p12_password],
    )
    number = latest_testflight_build_number(
      app_identifier: "com.walletconnect.flutterdapp",
      username: options[:username],
    )
    increment_build_number(
      build_number: number + 1,
      xcodeproj: "Runner.xcodeproj"
    )
    gym(
      configuration: "Release",
      project: "Runner.xcodeproj",
      scheme: "Runner",
      export_method: "app-store",
      xcargs: "PROJECT_ID='#{options[:project_id]}'"
    )
    upload_to_testflight(
      apple_id: apple_id,
      app_identifier: "com.walletconnect.flutterdapp",
      # changelog: "#{ENV["SCHEME"]} app weekly build ðŸš€",
      distribute_external: true,
      notify_external_testers: true,
      skip_waiting_for_build_processing: false,
      groups: ["Esternal testers"]
    )
    clean_build_artifacts()
  end


end
